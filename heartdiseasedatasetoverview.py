# -*- coding: utf-8 -*-
"""HeartDiseaseDatasetOverview.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V-EaaD7MKUdy-KN85y3BwUhIu0rH5U7c
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier

from google.colab import files

upload = files.upload()

data = pd.read_csv('heart.csv')

data.head()

data.tail()

data.info()

data.shape

data.describe()

data.columns

data.dtypes

missing_vals = data.isnull().any(axis=1)
print("Rows with missing values")
print(missing_vals)

duplicate_rows = data[data.duplicated()]

print("Duplicate rows:")
print(duplicate_rows)

"""

*   List item
*   List item

"""

data.dropna(axis = 0, inplace = True)

correlation_df = data[["Cholesterol","RestingBP"]]
correlation = correlation_df["Cholesterol"].corr(correlation_df["RestingBP"])
print(f"correlation between cholesterol and bloot pressure: {correlation}")

plt.figure(figsize=(8,6))
plt.scatter(correlation_df["Cholesterol"], correlation_df["RestingBP"], color="blue", alpha=0.5)
plt.title("Correlation between Cholesterol and Blood Pressure")
plt.xlabel("Cholesterol")
plt.ylabel("Blood Pressure")
plt.grid(True)
plt.show()

age_groups = pd.cut(data["Age"], bins=[0,30,40,50,60,70,80], labels = ["<30","30-40","40-50","50-60","60-70","70-80"])
heart_disease_counts = data[data["HeartDisease"]==1].groupby([age_groups,"Sex"]).size().unstack()
most_common_chest_pain = data.groupby(age_groups)["ChestPainType"].apply(lambda x: x.mode().iloc[0])
average_hr_by_age = data.groupby(age_groups)["MaxHR"].mean()

print("Heart Disease cases and most common chest pain type by age group and gender")
print(pd.concat([heart_disease_counts, most_common_chest_pain, average_hr_by_age], axis = 1))

heart_disease_counts.plot(kind="bar", stacked=True)
plt.title("Heart Disease Cases by Age Group and Gender")
plt.xlabel("Age Group")
plt.ylabel("Number of Cases")
plt.xticks(rotation=45)
plt.legend(title="Gender")
plt.tight_layout()
plt.show()

pip install scikit-learn

data.head()

label_encoder = LabelEncoder()
data["Sex"] = label_encoder.fit_transform(data["Sex"])
data["ChestPainType"] = label_encoder.fit_transform(data["ChestPainType"])
data["RestingECG"] = label_encoder.fit_transform(data["RestingECG"])
data["ExerciseAngina"] = label_encoder.fit_transform(data["ExerciseAngina"])
data["ST_Slope"] = label_encoder.fit_transform(data["ST_Slope"])
x = data.drop("HeartDisease", axis=1)
y = data["HeartDisease"]
rf_classifier = RandomForestClassifier()
rf_classifier.fit(x, y)
feature_importances = rf_classifier.feature_importances_
feature_importances_df = pd.DataFrame({"Feature": x.columns, "Importances": feature_importances})
feature_importances_df = feature_importances_df.sort_values(by="Importances", ascending=False)
print("Ranked list of features by importances:")
print(feature_importances_df)
corr_matrix = x.corr()
importances_matrix = pd.DataFrame(corr_matrix)
importances_matrix['Importance'] = feature_importances
plt.figure(figsize=(12,6))
sns.heatmap(importances_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1, center=0, linewidths=0.5, linecolor="black")
plt.title("Feature Correlation and Importance Heatmap")
plt.show()

